{"version":3,"file":"component---src-pages-index-tsx-f9d190adb1ba2099dc10.js","mappings":"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","sources":["webpack://blog/./src/consts/thema.ts","webpack://blog/./src/consts/search.ts","webpack://blog/./src/hooks/useQeuryString.ts","webpack://blog/./src/components/Chip/index.tsx","webpack://blog/./src/components/ChipGroup/index.tsx","webpack://blog/./src/components/Pagination/index.tsx","webpack://blog/./src/components/PostListItem/index.tsx","webpack://blog/./src/components/PostList/index.tsx","webpack://blog/./src/consts/pagination.ts","webpack://blog/./src/pages/index.tsx"],"sourcesContent":["export const Colors = {\n  primary: \"rgb(50, 175, 178)\",\n};\n","export const DEFAULT_PAGE_NO = 1;\nexport const DEFAULT_CATEGORY = \"ALL\";\n\nexport const CATEGORY_TYPE_ALL = \"ALL\";\nexport const CATEGORY_TYPE_NOMAL = \"NOMAL\";\n","import { DEFAULT_CATEGORY, DEFAULT_PAGE_NO } from \"../consts/search\";\nimport { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\n\ntype ReturnValue = [\n  {\n    page: number;\n    category: string;\n  },\n  {\n    setPage: Dispatch<SetStateAction<number>>;\n    setCategory: Dispatch<SetStateAction<string>>;\n  }\n];\n\ntype PushStateProps = {\n  page: number;\n  category: string;\n};\n\nexport default (): ReturnValue => {\n  const defaults = useMemo(() => getDefaultValues(), []);\n\n  const [page, setPage] = useState<number>(defaults?.page ?? DEFAULT_PAGE_NO);\n  const [category, setCategory] = useState<string>(\n    defaults?.category ?? DEFAULT_CATEGORY\n  );\n\n  useEffect(() => {\n    pushState({ category, page: DEFAULT_PAGE_NO });\n  }, [category]);\n\n  useEffect(() => {\n    pushState({ category, page });\n  }, [page]);\n\n  return [\n    { category, page },\n    {\n      setCategory,\n      setPage,\n    },\n  ];\n};\n\nconst getDefaultValues = () => {\n  if (typeof location !== \"undefined\") {\n    const URLSearch = new URLSearchParams(location.search);\n\n    const paramPage = Number(URLSearch.get(\"page\"));\n    const paramCategory = URLSearch.get(\"category\");\n\n    return {\n      page: paramPage > 1 ? paramPage : DEFAULT_PAGE_NO,\n      category: paramCategory !== \"\" ? paramCategory : DEFAULT_CATEGORY,\n    };\n  }\n};\n\nconst pushState = ({ page, category }: PushStateProps) => {\n  history.pushState({}, \"\", `?category=${category}&page=${page}`);\n};\n","import styled from \"@emotion/styled\";\nimport React, { useEffect, useState } from \"react\";\nimport { CATEGORY_TYPE_ALL, CATEGORY_TYPE_NOMAL } from \"../../consts/search\";\n\ntype Props = {\n  item: ChipItem;\n  selected?: string;\n  onSelect?: (item: Props[\"item\"]) => void;\n  onUnSelect?: (item: Props[\"item\"]) => void;\n};\n\ntype CustomFunction = {\n  value: string | number;\n  updateChecked: (chk: boolean) => void;\n};\n\ntype ChipItem = {\n  value: string | number;\n  label: string;\n  type?: typeof CATEGORY_TYPE_NOMAL | typeof CATEGORY_TYPE_ALL;\n  checked?: boolean;\n};\n\nconst Chip = ({ item, selected, onSelect, onUnSelect }: Props) => {\n  const [isChecked, setIsChecked] = useState<boolean>(selected === item.value);\n\n  const handleSelect = () => {\n    onSelect?.(item);\n    setIsChecked(!isChecked);\n  };\n\n  const handleUnSelect = () => {\n    onUnSelect?.(item);\n    setIsChecked(!isChecked);\n  };\n\n  useEffect(() => {\n    setIsChecked(selected === item.value);\n  }, [selected]);\n\n  if (!item.label) {\n    return <></>;\n  }\n\n  return (\n    <ChipStyler\n      type=\"button\"\n      className=\"chip\"\n      aria-checked={isChecked}\n      onClick={() => {\n        isChecked ? handleUnSelect() : handleSelect();\n      }}\n    >\n      {item.label}\n    </ChipStyler>\n  );\n};\n\nconst ChipStyler = styled.button`\n  font-size: 0.8rem;\n  display: inline-block;\n  padding: 8px 16px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  background: #fff;\n  cursor: pointer;\n\n  &[aria-checked=\"true\"] {\n    border: 1px solid red;\n    color: red;\n  }\n`;\n\nexport { ChipItem, CustomFunction as ChipCustomFunction };\nexport default Chip;\n","import React, { useEffect, useState } from \"react\";\nimport { DEFAULT_CATEGORY } from \"../../consts/search\";\nimport Chip, { ChipItem } from \"../Chip\";\n\ntype Props = {\n  items: ChipItem[];\n  onChange?: (selected: string) => void;\n};\n\nfunction ChipGroup({ items, onChange }: Props) {\n  const [selected, setSelected] = useState<string>(\"\");\n\n  const handleSelect = (item: ChipItem) => {\n    const value = String(item.value);\n\n    setSelected(value);\n    onChange?.(value);\n  };\n\n  const handleUnSelect = () => {\n    setSelected(DEFAULT_CATEGORY);\n    onChange?.(DEFAULT_CATEGORY);\n  };\n\n  useEffect(() => {\n    items.forEach((item) => {\n      if (item.checked) {\n        setSelected(String(item.value));\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"chip-group\">\n      {items.map((item) => (\n        <Chip\n          item={item}\n          selected={selected}\n          key={`chip-${item.value}`}\n          onSelect={handleSelect}\n          onUnSelect={handleUnSelect}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport { Props as ChipGroupProps };\nexport default React.memo(ChipGroup);\n","import styled from \"@emotion/styled\";\nimport React, { useMemo } from \"react\";\nimport { Colors } from \"../../consts/thema\";\n\ntype Props = {\n  // 총 데이터의 갯수\n  count: number;\n\n  // 몇개의 페이지 버튼을 출력할 것인지\n  buttonLimit?: number;\n\n  // 한 페이지에 몇개의 row를 보여줄지\n  rowLimit?: number;\n\n  // 현재 선택된 페이지\n  current: number;\n\n  onClickButton: (page: number) => void;\n};\n\nfunction Pagination({\n  count,\n  buttonLimit,\n  current,\n  rowLimit,\n  onClickButton,\n}: Props) {\n  const handleClickButton = (page: number) => {\n    onClickButton(page);\n  };\n\n  const paging = useMemo(() => {\n    // 몇개의 페이지 버튼을 출력할 것인지\n    const limitValue = buttonLimit ?? 10;\n\n    // 한 페이지에 몇개의 row를 보여줄지\n    const pageSizeValue = rowLimit ?? 10;\n\n    // 총 페이지\n    const totalPage = Math.ceil(count / pageSizeValue);\n\n    // 페이지 그룹\n    const pageGroup = Math.ceil(current / limitValue);\n\n    // 해당 그룹의 마지막 페이지\n    let lastPage = pageGroup * limitValue;\n\n    // 마지막 페이지가 totalPage보다 크면 totalPage로 변경\n    if (lastPage > totalPage) {\n      lastPage = totalPage;\n    }\n\n    const firstPage = (pageGroup - 1) * limitValue;\n    const nextPage = lastPage + 1;\n    const prevPage = firstPage - 1;\n\n    const showBlockCount =\n      lastPage >= totalPage ? lastPage % limitValue : limitValue;\n\n    const pageButtons = [];\n\n    for (let i = 1; i <= showBlockCount; i++) {\n      const now = firstPage + i;\n\n      if (isNaN(now)) continue;\n\n      pageButtons.push(\n        <PageButton\n          type=\"button\"\n          key={`page-button-${i}`}\n          aria-selected={now === current}\n          onClick={() => handleClickButton(now)}\n        >\n          {now}\n        </PageButton>\n      );\n    }\n\n    return {\n      nextPage,\n      prevPage,\n      pageButtons,\n    };\n  }, [count, current]);\n\n  return <Styler>{paging.pageButtons}</Styler>;\n}\n\nconst Styler = styled.div`\n  padding: 20px 0;\n  text-align: center;\n`;\n\nconst PageButton = styled.button`\n  border: 2px solid #ccc;\n  cursor: pointer;\n  margin: 0 8px;\n  min-width: 30px;\n  padding: 8px 12px;\n  background: none;\n  border-radius: 4px;\n  color: #666;\n\n  &[aria-selected=\"true\"] {\n    border: 2px solid ${Colors.primary};\n    color: ${Colors.primary};\n    font-weight: bold;\n  }\n`;\n\nexport default Pagination;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Colors } from \"../../consts/thema\";\nimport { RemarkNode } from \"../../types/MarkdownRemark\";\n\ntype Props = {\n  item: RemarkNode;\n  onClickItem?: (item: Props[\"item\"]) => void;\n};\n\nfunction ListItem({ item, onClickItem }: Props) {\n  const handleClickItem = () => {\n    onClickItem?.(item);\n  };\n\n  return (\n    <Item onClick={handleClickItem}>\n      <Title> {item.frontmatter.title} </Title>\n      <Description>{item.frontmatter.description}</Description>\n      <DescriptionDate>{item.frontmatter.date}</DescriptionDate>\n    </Item>\n  );\n}\n\nconst Item = styled.li`\n  padding: 0 16px;\n  padding-bottom: 16px;\n  margin-bottom: 16px;\n  border-bottom: 1px solid #eee;\n  cursor: pointer;\n`;\n\nconst Title = styled.h2`\n  font-size: 1.4rem;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst Description = styled.p`\n  font-size: 0.9rem;\n  padding: 4px 0;\n  color: #666;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst DescriptionDate = styled.p`\n  font-size: 0.85rem;\n  padding: 4px 0;\n  color: #666;\n  text-align: right;\n`;\n\nexport { Props as ListItemProps };\n\nexport default ListItem;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { POST_LIMIT } from \"../../consts/pagination\";\nimport { CATEGORY_TYPE_ALL, DEFAULT_CATEGORY } from \"../../consts/search\";\nimport useQeuryString from \"../../hooks/useQeuryString\";\nimport {\n  AllMarkdownRemark,\n  PostCategoryStatistics,\n  RemarkNode,\n} from \"../../types/MarkdownRemark\";\nimport { ChipItem } from \"../Chip\";\nimport ChipGroup from \"../ChipGroup\";\nimport Pagination from \"../Pagination\";\nimport ListItem, { ListItemProps } from \"../PostListItem\";\n\ntype Props = {\n  filter?: boolean;\n  pagination?: boolean;\n  postData: AllMarkdownRemark;\n  onClickItem?: (item: ListItemProps[\"item\"]) => void;\n};\n\nfunction List({ postData, pagination, filter, onClickItem }: Props) {\n  const { nodes, group } = postData.allMarkdownRemark;\n\n  const [showPosts, setShowPosts] = useState<RemarkNode[]>();\n\n  const [{ page, category }, setQueryString] = useQeuryString();\n\n  const posts = nodes.filter((node) => {\n    if (category === CATEGORY_TYPE_ALL) {\n      return true;\n    }\n\n    return category === node.frontmatter.category;\n  });\n\n  useEffect(() => {\n    const startIndes = (page - 1) * POST_LIMIT;\n    const list = posts.slice(startIndes, startIndes + POST_LIMIT - 1);\n\n    setShowPosts(list);\n\n    if (list.length === 0) {\n      setQueryString.setPage(1);\n    }\n  }, [page, category]);\n\n  const categories = useMemo(() => getCategories(group, category), []);\n\n  const handleClickItem = (item: ListItemProps[\"item\"]) => {\n    onClickItem?.(item);\n  };\n\n  const handleClickPageButton = (page: number) => {\n    setQueryString.setPage(page);\n  };\n\n  const handleChangeGroup = (category: string) => {\n    setQueryString.setCategory(category);\n  };\n\n  return (\n    <div>\n      {filter && <ChipGroup items={categories} onChange={handleChangeGroup} />}\n\n      <ul>\n        {showPosts &&\n          showPosts.map((item) => (\n            <ListItem\n              item={item}\n              key={`list-item-${item.id}`}\n              onClickItem={handleClickItem}\n            />\n          ))}\n      </ul>\n\n      {pagination && (\n        <Pagination\n          count={posts.length}\n          current={page}\n          onClickButton={handleClickPageButton}\n        />\n      )}\n    </div>\n  );\n}\n\nconst getCategories = (group: PostCategoryStatistics[], selected: string) => {\n  const items: ChipItem[] = [\n    {\n      value: DEFAULT_CATEGORY,\n      label: DEFAULT_CATEGORY,\n      type: CATEGORY_TYPE_ALL,\n      checked: selected === DEFAULT_CATEGORY,\n    },\n  ];\n\n  group.forEach(({ fieldValue, totalCount }) => {\n    items.push({\n      value: fieldValue,\n      label: `${fieldValue} : ${totalCount}`,\n      checked: selected === fieldValue,\n    });\n  });\n\n  return items;\n};\n\nexport { Props as ListProps };\n\nexport default List;\n","export const POST_LIMIT = 10;\n","import React from \"react\";\nimport List from \"../components/PostList\";\nimport { ListItemProps } from \"../components/PostListItem\";\nimport { graphql, navigate } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport { AllMarkdownRemark } from \"../types/MarkdownRemark\";\nimport MainLayout from \"../components/Layouts/MainLayout\";\nimport SEO from \"../components/SEO\";\n\ntype Props = {\n  data: AllMarkdownRemark;\n};\n\nconst GyeongLogPostList = ({ data }: Props) => {\n  const handleClickItem = ({ frontmatter }: ListItemProps[\"item\"]) => {\n    navigate(`/${frontmatter.category}/${frontmatter.slug}`);\n  };\n\n  return (\n    <>\n      {data && (\n        <MainLayout>\n          <SEO title=\"게시글 목록\" />\n          <Contents>\n            <List\n              postData={data}\n              filter\n              pagination\n              onClickItem={handleClickItem}\n            />\n          </Contents>\n        </MainLayout>\n      )}\n    </>\n  );\n};\n\nconst Contents = styled.main`\n  max-width: 1000px;\n  min-height: 600px;\n  padding-top: 40px;\n  margin: 0 auto;\n\n  & .chip-group {\n    text-align: center;\n    margin-bottom: 20px;\n  }\n\n  & .chip-group .chip {\n    margin: 0 4px;\n  }\n`;\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n      totalCount\n\n      group(field: frontmatter___category) {\n        totalCount\n        fieldValue\n      }\n\n      nodes {\n        id\n        fileAbsolutePath\n        frontmatter {\n          title\n          slug\n          description\n          date\n          category\n        }\n      }\n    }\n  }\n`;\n\nexport default GyeongLogPostList;\n"],"names":["Colors","primary","DEFAULT_CATEGORY","getDefaultValues","location","URLSearch","URLSearchParams","search","paramPage","Number","get","paramCategory","page","category","pushState","history","ChipStyler","item","selected","onSelect","onUnSelect","useState","value","isChecked","setIsChecked","useEffect","label","type","className","onClick","ChipGroup","items","onChange","setSelected","handleSelect","String","handleUnSelect","forEach","checked","map","key","React","Styler","PageButton","count","buttonLimit","current","rowLimit","onClickButton","paging","useMemo","limitValue","pageSizeValue","totalPage","Math","ceil","pageGroup","lastPage","firstPage","nextPage","prevPage","showBlockCount","pageButtons","i","now","isNaN","push","Item","Title","Description","DescriptionDate","onClickItem","frontmatter","title","description","date","getCategories","group","fieldValue","totalCount","postData","pagination","filter","allMarkdownRemark","nodes","showPosts","setShowPosts","defaults","setPage","setCategory","useQeuryString","setQueryString","posts","node","startIndes","list","slice","length","categories","handleClickItem","id","Contents","data","MainLayout","SEO","navigate","slug"],"sourceRoot":""}