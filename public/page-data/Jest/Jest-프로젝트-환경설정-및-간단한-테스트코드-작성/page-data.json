{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Jest/Jest-프로젝트-환경설정-및-간단한-테스트코드-작성",
    "result": {"data":{"markdownRemark":{"html":"<p>이번에는 Jest를 이용하여 테스트 코드를 작성하는 방법에 대해 알아보겠습니다.</p>\n<p>우선 작업환경 셋팅부터 하겠습니다.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">mkdir jest-study\n\ncd jest-study\n\n// 해당 폴더를 npm환경으로 만들기\nnpm init --yes\n\n//jest를 글로벌 환경에 설치\nnpm install jest --global\n\n// Error: EACCES: permission denied가 뜬다면\nsudo npm install jest --global\n\n// 해당 패키지에서 jest를 사용할 수 있도록 설정\njest --init\n\n// package.json에 jest를 사용할 수 있도록 스크립트를 추가할 것인지\n ✓ Would yo like to use Jest when running &quot;test&quot; script in &quot;package.json&quot;? &gt; Yes\n\n// Typescript를 사용할 것인지\n ✓ Would you like to use Typescript for the configuration file? &gt; no\n\n// 테스트 환경 선택\n ✓ Choose the test environment that will be used for testing &gt; node\n\n// jest가 coverage reports를 보여주기를 원하는지\n ✓ Do you want Jest to add coverage reports? &gt; no\n\n// js 코드를 빌드할 때 어떤 엔진을 사용할 것인지\n ✓ Which provider should be used to instrument code for coverage? &gt; v8\n\n// 테스트를 할 때 마다 mock call이나 instance를 clear할 것 인지\n ✓ Automatically clear mock calls and instances between every test? &gt; yes</code>\n        </deckgo-highlight-code>\n<p>위와 같이 설정을 완료 했다면 이제 jest를 사용할 준비가 완료 되었습니다.</p>\n<p>이제 예제코드를 통해 간단한 코드를 테스트 해보겠습니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">// src &gt; basic &gt; add.js\nfunction add(a, b) {\n  return a + b;\n}\n\nmodule.exports = add;</code>\n        </deckgo-highlight-code>\n<p>간단하게 a + b 를 하는 함수입니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">// src &gt; basic &gt; test &gt; add.test.js\nconst add = require(&quot;../add.js&quot;);\n\n// test(&#39;description&#39;, callback, timeout)\ntest(&quot;1 + 2를 했을 때 3이 return 되는지 테스트&quot;, () =&gt; {\n  expect(add(1, 2)).toBe(3);\n});</code>\n        </deckgo-highlight-code>\n<ul>\n<li><a href=\"https://jestjs.io/docs/api#testname-fn-timeout\">test(description, callback, timeout)</a>\n<ul>\n<li>it으로도 사용이 되며 모든 테스트파일에서 테스트를 실행할 때 필요한 함수</li>\n</ul>\n</li>\n<li><a href=\"https://jestjs.io/docs/expect#expectvalue\">expect(value)</a>\n<ul>\n<li>값을 테스트 할 때 마다 사용되는 함수</li>\n</ul>\n</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobevalue\">.toBe(value)</a>\n<ul>\n<li>expect에 전할한 값을 비교하거나 객체 인스턴스 참조 ID를 확인하는 데 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<p>npm run test를 통해 jest를 실행합니다.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">npm run test\n\n  ✓ 1 + 2를 했을 때 3이 return 되는지 테스트 (2 ms)\n\n----------|---------|----------|---------|---------|-------------------\nFile      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n----------|---------|----------|---------|---------|-------------------\nAll files |     100 |      100 |     100 |     100 |\n add.js   |     100 |      100 |     100 |     100 |\n----------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.567 s, estimated 1 s\nRan all test suites.</code>\n        </deckgo-highlight-code>\n<p>위에 표 차트로 나오는게 위에서 jest 설정할 때 coverage reports를 볼 수 있게 설정하면 나오는 데이터입니다.</p>\n<p>저는 보여드리기 위해 yes를 설정했고 다음 글부터는 coverage reports없이 진행하겠습니다.</p>\n<p>여기까지는 기본셋팅 후 add를 테스트하는 테스트 코드를 구현해 봤습니다.</p>\n<p>coverage reports를 보고싶지 않으신 분들은 jest.config.js에서 collectCoverage값을 false로 바꿔주세요.</p>\n<h1>참조</h1>\n<ul>\n<li><a href=\"https://jestjs.io/docs/getting-started\">Jestjs Getting Started</a></li>\n</ul>","frontmatter":{"title":"[Jest] Jest 프로젝트 환경설정 및 간단한 테스트코드 작성","slug":"Jest-프로젝트-환경설정-및-간단한-테스트코드-작성","date":"2022.01.13","description":"Jest 프로젝트 환경설정을 완료한 후 간단한 테스트코드를 작성할 수 있다."}}},"pageContext":{"id":"ca360da7-c63e-5bc2-a130-6d65689f7add"}},
    "staticQueryHashes": []}