{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Jest/비동기-테스트코드-작성하기",
    "result": {"data":{"markdownRemark":{"html":"<p>이번에는 비동기로 동작하는 코드를 테스트하는 코드를 작성해 보겠습니다.</p>\n<h1>Done</h1>\n<p>첫번째 방식은 Done을 이용하는 방식입니다.</p>\n<p>Jest는 done이 호출 되기 전까지 테스트를 마치지 않고 기다립니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">async function fetchUser(callback) {\n  const data = await Promise.resolve({ name: &quot;Jest&quot;, age: 18 });\n\n  callback(data);\n}\n\ndescribe(&quot;done&quot;, () =&gt; {\n  it(&quot;then&quot;, (done) =&gt; {\n    fetchUser((data) =&gt; {\n      expect(data).toEqual({ name: &quot;Jest&quot;, age: 18 });\n      done();\n    });\n  });\n});</code>\n        </deckgo-highlight-code>\n<h1>Promise</h1>\n<p>Promise를 사용할 경우 return을 이용하여 더 확실하게 테스트를 핸들링할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function fetchUserName(error) {\n  if (error) {\n    return Promise.reject(&quot;Error&quot;);\n  }\n  return Promise.resolve(&quot;Jest&quot;);\n}\n\ndescribe(&quot;return&quot;, () =&gt; {\n  describe(&quot;then/catch&quot;, () =&gt; {\n    // 리턴 값 체크\n    it(&quot;then&quot;, () =&gt; {\n      return fetchUserName().then((data) =&gt; {\n        expect(data).toBe(&quot;Jest&quot;);\n      });\n    });\n\n    // 에러 체크\n    it(&quot;catch&quot;, () =&gt; {\n      return fetchUserName(&quot;error&quot;).catch((e) =&gt; {\n        expect(e).toBe(&quot;Error&quot;);\n      });\n    });\n  });\n\n  describe(&quot;.resolves/.rejects&quot;, () =&gt; {\n    // 리턴 값 체크\n    it(&quot;resolves&quot;, () =&gt; {\n      return expect(fetchUserName()).resolves.toBe(&quot;Jest&quot;);\n    });\n\n    // 에러 체크\n    it(&quot;rejects&quot;, () =&gt; {\n      return expect(fetchUserName(&quot;error&quot;)).rejects.toBe(&quot;Error&quot;);\n    });\n  });\n});</code>\n        </deckgo-highlight-code>\n<h1>Async/Await</h1>\n<p>Async/Await을 사용하는 방식도 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">describe(&quot;asycn/await&quot;, () =&gt; {\n  // 리턴 값 체크\n  it(&quot;resolves&quot;, async () =&gt; {\n    await expect(fetchUserName()).resolves.toBe(&quot;Jest&quot;);\n  });\n\n  it(&quot;rejects&quot;, async () =&gt; {\n    await expect(fetchUserName(&quot;error&quot;)).rejects.toBe(&quot;Error&quot;);\n  });\n});</code>\n        </deckgo-highlight-code>\n<p>이로써 Jest에서 비동기 로직을 테스트할 수 있는 방법을 알아봤습니다.</p>\n<p>위에 예시 중에 특별하게 우수한 코드는 없으며 본인의 기호에 맞고, 팀에 기호에 맞는 코드를 선택하여 테스트를 작성하시면 될 것 같습니다.</p>","frontmatter":{"title":"[Jest] 비동기 테스트코드 작성하기","slug":"비동기-테스트코드-작성하기","date":"2022.01.20","description":"비동기로 작동하는 함수를 테스트할 수 있는 코드를 작성할 수 있다."}}},"pageContext":{"id":"46745c3f-20ac-5b35-a943-2ce8b202c0b7"}},
    "staticQueryHashes": []}