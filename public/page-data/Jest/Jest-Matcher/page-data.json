{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Jest/Jest-Matcher",
    "result": {"data":{"markdownRemark":{"html":"<p>이번에는 Jest를 사용할 때 일반적으로 사용하는 몇가지의 Matcher에 대해 알아보겠습니다.</p>\n<h1><a href=\"https://jestjs.io/docs/expect#tobevalue\">.toBe(value)</a></h1>\n<p>expect에서 전달된 값을 비교하거나 객체 인스턴스 참조 ID를 확인하는 데 사용합니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">test(&quot;two plus two is four&quot;, () =&gt; {\n  expect(2 + 2).toBe(4);\n});</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://jestjs.io/docs/expect#toequalvalue\">.toEqual(value)</a></h1>\n<p>객체의 값을 비교할 때 사용됩니다.</p>\n<p>객체의 인스턴스 참조 ID를 비교하는 것이 아닌 객체의 모든 속성을 재귀적으로 비교하여 값이 같은지를 비교합니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">test(&quot;object check&quot;, () =&gt; {\n  const obj = { one: 1, two: 2 };\n\n  expect({ one: 1, two: 2 }).toBe(obj);\n});\n/* .toBe를 사용할 경우 아래와 같이 에러가 발생\n    expect(received).toBe(expected) // Object.is equality\n\n    If it should pass with deep equality, replace &quot;toBe&quot; with &quot;toStrictEqual&quot;\n\n    Expected: {&quot;one&quot;: 1, &quot;two&quot;: 2}\n    Received: serializes to the same string\n*/\n\ntest(&quot;object check&quot;, () =&gt; {\n  const obj = { one: 1, two: 2 };\n\n  expect({ one: 1, two: 2 }).toEqual(obj);\n});</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://jestjs.io/docs/using-matchers#truthiness\">Null, Undefined, False 구분 메서드</a></h1>\n<ul>\n<li><a href=\"https://jestjs.io/docs/expect#tobenull\">.toBeNull()</a> : expect에 전달된 값이 null인 경우 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobeundefined\">.toBeUndefined()</a> : expect에 전달된 값이 undefined인 경우 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobedefined\">.toBeDefined()</a> : expect에 전달된 값이 undefined이 아닌 경우 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobetruthy\">.toBeTruthy()</a> : expect에 전달된 값이 if 명령문에서 true로 취급 하는 값인 경우 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobefalsy\">.toBeFalsy()</a> : expect에 전달된 값이 if 명령문에서 false로 취급 하는 값인 경우 통과</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">test(&quot;Check Null, Undefined, False&quot;, () =&gt; {\n  // 값이 null일 경우만 통과\n  expect(null).toBeNull();\n\n  // 값이 undefined만 아니면 통과\n  expect(n).toBeDefined();\n  expect({}).toBeDefined();\n  expect(100).toBeDefined();\n\n  // 값이 undefined일 경우만 통과\n  expect(undefined).toBeUndefined();\n\n  // if문에서 true로 취급하는 경우 통과\n  expect(true).toBeTruthy();\n  expect(1).toBeTruthy();\n\n  // if문에서 false로 취급하는 경우 통과\n  expect(false).toBeFalsy();\n  expect(null).toBeFalsy();\n  expect(0).toBeFalsy();\n  expect(&quot;&quot;).toBeFalsy();\n});</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://jestjs.io/docs/using-matchers#numbers\">Number 구분 메서드</a></h1>\n<ul>\n<li><a href=\"https://jestjs.io/docs/expect#tobegreaterthannumber--bigint\">.toBeGreaterThan(value)</a> : value값이 expect value보다 크면 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobegreaterthanorequalnumber--bigint\">.toBeGreaterThanOrEqual(value)</a> : value값이 expect value보다 크거나 같으면 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobelessthannumber--bigint\">.toBeLessThan(value)</a> : value값이 expect value보다 작으면 통과</li>\n<li><a href=\"https://jestjs.io/docs/expect#tobelessthanorequalnumber--bigint\">.toBeLessThanOrEqual(value)</a> : value값이 expect value보다 작거나 같으면 통과</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">test(&quot;two plus two&quot;, () =&gt; {\n  const value = 2 + 2;\n  // value &gt; 3\n  expect(value).toBeGreaterThan(3);\n  // value &gt;= 4\n  expect(value).toBeGreaterThanOrEqual(4);\n  // value &lt; 5\n  expect(value).toBeLessThan(5);\n  // value &lt;= 4\n  expect(value).toBeLessThanOrEqual(4);\n});</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://jestjs.io/docs/using-matchers#strings\">정규식으로 문자열 체크하기</a></h1>\n<p>정규표현식으로 문자열을 확인할 경우에는 .toMatch를 사용할 수 있습니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">// 문자열에 I가 포함되어 있지 않은 경우 통과\ntest(&quot;there is no I in team&quot;, () =&gt; {\n  expect(&quot;team&quot;).not.toMatch(/I/);\n});\n\n//문자열에 stop이 포함되어 있으면 있으면 통과\ntest(&#39;but there is a &quot;stop&quot; in Christoph&#39;, () =&gt; {\n  expect(&quot;Christoph&quot;).toMatch(/stop/);\n});</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://jestjs.io/docs/using-matchers#exceptions\">예외 체크하기</a></h1>\n<p>예외를 체크할 때에는 <a href=\"https://jestjs.io/docs/expect#tothrowerror\">.toThrow(error?)</a>를 이용하여 테스트할 수 있습니다.</p>\n<h2>.toThrow에 전달 가능한 인자의 종류</h2>\n<ul>\n<li>정규식 : 오류 메시지가 패턴과 일치할 경우 통과</li>\n<li>문자열 : 오류 메시지가 문자열과 동일하다면 통과</li>\n<li>오류 객체: 오류 메세지가 오류 객체의 message의 값과 같다면 통과</li>\n<li>오류 클레스: 오류 오브젝트의 인스턴스와 클레스가 같으면 통과</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">function compileAndroidCode() {\n  throw new Error(&quot;you are using the wrong JDK&quot;);\n}\n\ntest(&quot;compiling android goes as expected&quot;, () =&gt; {\n  // 에러가 발생했다면 통과\n  expect(() =&gt; compileAndroidCode()).toThrow();\n\n  // 에러 객체의 인스턴스가 Error라면 통과\n  expect(() =&gt; compileAndroidCode()).toThrow(Error);\n\n  // error 메시지가 &quot;you are using the wrong JDK&quot; 라면 통과\n  expect(() =&gt; compileAndroidCode()).toThrow(&quot;you are using the wrong JDK&quot;);\n\n  // error 메시지에 JDK라는 문자열이 있다면 통과\n  expect(() =&gt; compileAndroidCode()).toThrow(/JDK/);\n});</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"[Jest] Jest Matcher","slug":"Jest-Matcher","date":"2022.01.17","description":"Jest에서 일반적으로 사용되는 Matcher에 대해 알 수 있다."}}},"pageContext":{"id":"b4c64c92-9541-51ed-8e10-a470f8cbee86"}},
    "staticQueryHashes": []}