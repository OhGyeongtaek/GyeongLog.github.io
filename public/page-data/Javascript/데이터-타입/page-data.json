{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Javascript/데이터-타입",
    "result": {"data":{"markdownRemark":{"html":"<p>이번에는 자바스크립트의 변수 데이터 타입에 대해 알아보겠습니다.</p>\n<p>자바스크립트에서는 값의 데이터 형식을 신경쓰지 않고 var, let, const의 방식으로 데이터를 선언합나디.</p>\n<h1>데이터 타입은 왜 필요한 이유</h1>\n<ul>\n<li>값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해</li>\n<li>값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해</li>\n<li>메모리에서 읽어 들인 2진수를 어떻게 해석할 지 결정하기 위해</li>\n</ul>\n<h1>Number</h1>\n<p>숫자를 표현하는 데이터 타입입니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">let num1 = 12;\nlet num2 = 12.12;\n\n// Number에서 특별한 값들\nconsole.log(1 / 0); // Infinity\nconsole.log(-1 / 0); // -Infinity\nconsole.log(&quot;string&quot; / 2); // NaN\n\nconst number = 12345;\n\n//BigInt\n// bigint데이터 형식을 선언할 때에는 숫자 뒤에 n을 붙인다.\nconst bigInt = 123456789123456789123456789123456789123456789123456789n;\n\n// what is type : number\nconsole.log(`what is type : ${typeof number}`);\n\n// what is type : bigint\nconsole.log(`what is type : ${typeof bigInt}`);</code>\n        </deckgo-highlight-code>\n<h1>String</h1>\n<p>문자열을 표현하는 데이터 형식입니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const name = &quot;오경택&quot;;\n\n// 문자열 붙이기\n\n// 내 이름은 오경택 입니다.\nconsole.log(&quot;내 이름은 &quot; + name + &quot; 입니다.&quot;);\n\n// or\n\nconsole.log(`내 이름은 ${name} 입니다.`);</code>\n        </deckgo-highlight-code>\n<h1>Boolean</h1>\n<p>데이터의 ture, false값을 표현하는 데이터 형식입니다.</p>\n<p>자바스크립트에서는 false값을 의미하는 데이터 형식이 여러가지가 있습니다.</p>\n<p>False : 0, null, undefined, NaN, ''\nTrue: false값이 아닌 모든것</p>\n<h1>Null</h1>\n<p>사용자가 명확하게 지정한 empty값</p>\n<h1>Undefined</h1>\n<p>사용자가 지정하지 않고 선언만 되었을 때의 값</p>\n<h1>Symbol</h1>\n<p>Symbol은 변경 불가능한 원시 타입의 값이며, 다른 값과 중복되지 않는 고유한 값이다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">// 선언하기 Symbol(&quot;해당 심볼에 대한 설명&quot;)\nconst symbol1 = Symbol(&quot;This is symbol&quot;);\nconst symbol2 = Symbol(&quot;This is symbol&quot;);\n\nconsole.log(symbol1 === symbol2);\n\n// 설명 출력하기\nconsole.log(symbol1.description);\n\n// Symbol Object 안에 넣기\nconst symbolObject = {\n  [symbol1]: &quot;나는 심볼 1입니다.&quot;,\n  [symbol2]: &quot;나는 심볼 2입니다.&quot;,\n};\n\nconst keys = Object.keys(symbolObject);\n\n/*\n    print : []\n    symbol을 이용해 오브젝트에 값을 선언 했을 경우\n    Object.keys, Object.values, Object.entries의 메서드를 통해서는 값을 가져올 수 없다.\n*/\nconsole.log(keys);</code>\n        </deckgo-highlight-code>\n<h1>Object</h1>\n<p>key : value 형식의 집합체</p>\n<p>key 값에는 string, Symbol이 들어갈 수 있다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const obj1 = {\n  name: &quot;name&quot;,\n  [Symbol(&quot;test&quot;)]: &quot;this is symbol&quot;,\n}; // Object Literal\n\nconst obj2 = new Object(); //Object Constructor</code>\n        </deckgo-highlight-code>\n<h1>Function</h1>\n<p>JavaScript의 함수는 다른 모든 객체처럼 속성과 메서드를 가질 수 있으므로 일급(first-class) 객체입니다.</p>","frontmatter":{"title":"[Javascript] 데이터 타입","slug":"데이터-타입","date":"2021.12.29","description":"[Javascript] 데이터 타입에 대해 이해할 수 있다."}}},"pageContext":{"id":"368f15c4-1161-5a06-9226-1df29a72f714"}},
    "staticQueryHashes": []}