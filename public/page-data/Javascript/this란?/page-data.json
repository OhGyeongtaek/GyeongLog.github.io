{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Javascript/this란?",
    "result": {"data":{"markdownRemark":{"html":"<h1>this란?</h1>\n<p>함수가 실행될 때 암묵적으로 생성되는 객체.</p>\n<h1>this는 어떤식으로 결정이 될까요??</h1>\n<p>우선 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this\">MDN</a>을 왔을 때 this는 \"대부분의 경우 this의 값은 함수를 호출한 방법에 의해 결정됩니다.\" 라고 나와있습니다.</p>\n<p>그럼 이제 어떤식으로 호출이 되어지는지 확인해 보겠습니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const obj = {\n  description: &quot;this 테스트중&quot;,\n  thisTest: function () {\n    console.log(&quot;this는&quot;, this, &quot;입니다&quot;);\n  },\n};\n\n// obj 객체 출력\nobj.thisTest();\n\nconst { thisTest } = obj;\n\n// window 객체 출력 global = window\nconsole.log(this);\n\n// global에서 함수를 실행 했기 때문에 window 객체 출력\nthisTest();</code>\n        </deckgo-highlight-code>\n<p>javascript 에서 this는 누가 호출했는지에 따라 달라집니다.</p>\n<h1>bind, call, apply의 차이점</h1>\n<p>호출에 따라 달라지는 this를 고정하기 위해서는 bind, call, apply를 사용할 수 있습니다.</p>\n<ul>\n<li>bind: 바인딩 된 함수를 반환</li>\n<li>call: 바인딩 된 함수를 실행 (parameter를 순차적으로 입력)</li>\n<li>apply: 바인딩 된 함수를 실행 (parameter를 2번째 인자에 배열로 입력)</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const bindObject = {\n  description: &quot;bind가 된 객체를 테스트 하기 위한 객체&quot;,\n  console: function () {\n    console.log(this, arguments[0]);\n  },\n};\n\nconst bindFunction = bindObject.console.bind(bindObject);\n\n// {description: &#39;bind가 된 객체를 테스트 하기 위한 객체&#39;, console: ƒ} 1\nbindFunction(1);\n\n// {description: &#39;bind가 된 객체를 테스트 하기 위한 객체&#39;, console: ƒ} 1\nbindObject.console.call(bindObject, 1, 2, 3);\n\n// {description: &#39;bind가 된 객체를 테스트 하기 위한 객체&#39;, console: ƒ} 4\nbindObject.console.apply(bindObject, [4, 5, 6]);</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">화살표 함수(Arrow Function)</a></h1>\n<p>화살표 함수(Arrow Function)에서의 this를 한번 알아보겠습니다.</p>\n<ul>\n<li>this나 super에 대한 바인딩이 없고, methods 로 사용될 수 없습니다.</li>\n<li>반면 화살표 함수에는 this에 대한 바인딩이 없기때문에 bind, call, apply를 사용할 수 없습니다.</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const arrowObj = {\n  description: &quot;arrow function을 확인하기 위한 함수&quot;,\n  arrowFnc: () =&gt; {\n    console.log(this);\n  },\n};\n\n// window 객체 출력\narrowObj.arrowFnc();\n// window 객체 출력\narrowObj.arrowFnc.bind(arrowObj)();\n// window 객체 출력\narrowObj.arrowFnc.apply(arrowObj);\n// window 객체 출력\narrowObj.arrowFnc.call(arrowObj);</code>\n        </deckgo-highlight-code>\n<p>위에 코드를 보면 bind, apply, call를 이용해 this를 다시 바인딩을 할려고 해도 this는 window를 출력하는 것을 볼 수 있습니다.</p>","frontmatter":{"title":"[Javascript] this란?","slug":"this란?","date":"2021.11.19","description":"[Javascript] Javascript에서 this가 상황별로 어떤 객체가 들어가있는지 알 수 있다."}}},"pageContext":{"id":"c3736d75-15dc-531a-bdc0-2ec89dec8cca"}},
    "staticQueryHashes": []}