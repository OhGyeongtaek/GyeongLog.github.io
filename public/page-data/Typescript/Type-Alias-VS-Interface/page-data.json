{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Typescript/Type-Alias-VS-Interface",
    "result": {"data":{"markdownRemark":{"html":"<h1>Type Alias와 Interface의 공통점</h1>\n<p>Type Alias와 Interface는 거의 모든 기능을 유사하게 사용할 수 있습니다.</p>\n<div class=\"multicode\">\n<span>\n<h2> Interface </h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">// 선언\ninterface IPointer {\n  x: number;\n  y: number;\n}\n\n// 인터 페이스 병합\ninterface IArea extends IPointer {\n  name: string;\n}\n\n// 제네릭 선언\ninterface IObj&lt;T&gt; {\n  getObject: T;\n}</code>\n        </deckgo-highlight-code>\n</span>\n<span>\n<h2> Type Alias </h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">// 선언\ntype Pointer = {\n  x: number;\n  y: number;\n};\n\n// 병합\ntype Area = {\n  name: string;\n} &amp; Pointer;\n\n// 제네릭 선언\ntype Obj&lt;T&gt; = {\n  getObject: T;\n};</code>\n        </deckgo-highlight-code>\n</span>\n</div>\n<h1>Type Alias와 Interface의 차이점</h1>\n<p>두가지가 거의 유사하지만 분명 차이점은 무엇이 있을까요??</p>\n<p>Type Alias와 Interface의 차이점은 Interface는 선언 병합이 가능하지만 Type Alias는 할 수 없습니다.</p>\n<div class=\"multicode\">\n<span>\n<h2> Interface </h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Window {\n  title: string;\n}\n\ninterface Window {\n  document: string;\n}\n\ninterface Map&lt;Area&gt; {\n  area: Area;\n}\n\nconst window: Window = {\n  title: &quot;GyeongLog&quot;,\n  document: &quot;Type Alias VS Interface&quot;,\n};\n\nconsole.log(window);</code>\n        </deckgo-highlight-code>\n</span>\n<span>\n<h2> Type Alias </h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Window = {\n  title: string;\n};\n\ntype Window = {\n  document: string;\n};\n\n// Error: Duplicate identifier &#39;Window&#39;.</code>\n        </deckgo-highlight-code>\n</span>\n</div>\n<h1>Typescript팀이 권장하는 방식</h1>\n<blockquote>\n<p>For the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration. If you would like a heuristic, use interface until you need to use features from type.</p>\n</blockquote>\n<p>대부분의 경우 개인의 취향에 따라 Type Alias와 Interface를 선택 할 수 있습니다.</p>\n<p>타입스크립트는 필요한 기능에 따라 다르게 선언하도록 권장합니다.</p>\n<p>만약 당신이 휴리스틱을 원한다면, Type Alias의 기능이 필요하기 전까지는 Interface를 사용해주세요.</p>\n<h1>참고 사이트</h1>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces\">공식문서</a></li>\n</ul>","frontmatter":{"title":"[Typescript] Type Alias VS Interface","slug":"Type-Alias-VS-Interface","date":"2021.12.08","description":"Type Alias와 Interface의 차이점을 이해할 수 있다."}}},"pageContext":{"id":"1de95ece-c7d4-5bd9-aa5a-33f9ef3a8395"}},
    "staticQueryHashes": []}