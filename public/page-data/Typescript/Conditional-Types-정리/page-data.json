{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Typescript/Conditional-Types-정리",
    "result": {"data":{"markdownRemark":{"html":"<p>타입을 검사하여 조건에 맞는 타입을 반환하는 타입.</p>\n<h1>사용법</h1>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">// type TypeName = (조건부) ? true type : false type\ntype SomethingType = SomeType extends OtherType ? TrueType : FalseType;</code>\n        </deckgo-highlight-code>\n<h1><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\">Example1 (Typescript 공식 문서 참고)</a></h1>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface Animal {\n  live(): void;\n}\n\ninterface Dog extends Animal {\n  woof(): void;\n}\n\ntype Example1 = Dog extends Animal ? number : string;</code>\n        </deckgo-highlight-code>\n<p>해당 예제에서는 interface Dog가 Animal을 상속 받았기에 Example1는 number타입으로 선언이 된다.</p>\n<h1><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\">Example2 (Typescript 공식 문서 참고)</a></h1>\n<p>이번엔 Conditional Types를 사용했을 때와 사용하지 않았을 경우의 코드를 비교해 보자.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">interface IdLabel {\n  id: number /* some fields */;\n}\n\ninterface NameLabel {\n  name: string /* other fields */;\n}\n\n// NameOrId 타입 선언\ntype NameOrId&lt;T extends number | string&gt; = T extends number\n  ? IdLabel\n  : NameLabel;</code>\n        </deckgo-highlight-code>\n<h2>Conditional Types를 사용 하지 않은 코드</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">function createLabel(id: number): IdLabel;\nfunction createLabel(name: string): NameLabel;\nfunction createLabel(nameOrId: string | number): IdLabel | NameLabel;\nfunction createLabel(nameOrId: string | number): IdLabel | NameLabel {\n  throw &quot;unimplemented&quot;;\n}\n\nlet a = createLabel(&quot;typescript&quot;);\n// let a: NameLabel\n\nlet b = createLabel(2.8);\n// let b: IdLabel</code>\n        </deckgo-highlight-code>\n<h2>Conditional Types를 사용한 코드</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">function createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; {\n  throw &quot;unimplemented&quot;;\n}\n\nlet a = createLabel(&quot;typescript&quot;);\n// let a: NameLabel\n\nlet b = createLabel(2.8);\n// let b: IdLabel</code>\n        </deckgo-highlight-code>\n<p>Conditional Types를 사용하지 않았을 때 createLabel 함수는 입력 유형에 따라 여러번의 overload를 해야하는 번거로워 생긴다.</p>\n<p>위의 여러번의 overload를 해야하는 번거로움을 Conditional Types를 사용하여 단순화 시킬 수 있다.</p>","frontmatter":{"title":"[Typescript] Conditional Types 정리","slug":"Conditional-Types-정리","date":"2021.10.13","description":"Typescript에서 Utility Type Conditional Types이란 무엇인지 알아보자!"}}},"pageContext":{"id":"bd1eb94b-7da3-5df5-adc7-0cab90d859ba"}},
    "staticQueryHashes": []}