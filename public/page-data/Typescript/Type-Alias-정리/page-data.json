{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Typescript/Type-Alias-정리",
    "result": {"data":{"markdownRemark":{"html":"<h1>기본사용법</h1>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">// 기존에 존재하는 타입정의\ntype Text = string;\n\n// 객체 정의\ntype Center = {\n  id: number;\n  name: string;\n};</code>\n        </deckgo-highlight-code>\n<h1>String Literal Types</h1>\n<p>type에 문자열로 넣을 경우 정의한 문자열만 정의할 수 있다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Name = &quot;OGT&quot;;\nconst name: Name = &quot;OGT&quot;;</code>\n        </deckgo-highlight-code>\n<h1>Union Types: OR</h1>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Direction = &quot;left&quot; | &quot;right&quot; | &quot;up&quot; | &quot;down&quot;;\n\n//&#39;left&#39;, &#39;right&#39;, &#39;up&#39;, &#39;down&#39;만 정의할 수 있다.\nconst action: Direction = &quot;left&quot;;</code>\n        </deckgo-highlight-code>\n<h1>Discriminated Union</h1>\n<p>Union 타입을 사용할때 공통적인 property를 갖음으로서 좀 더 직관적인 코드를 작성할 수 있다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Child = {\n  child_name: string;\n  age: number;\n};\n\ntype Worker = {\n  worker_name: string;\n  age: number;\n};\n\ntype Center = {\n  type: &quot;어린이집&quot;;\n  name: string;\n  children: Child[];\n};\n\ntype Company = {\n  type: &quot;회사&quot;;\n  name: string;\n  workers: Worker[];\n};\n\n//Group = Center와 Company를 병합\ntype Group = Center | Company;</code>\n        </deckgo-highlight-code>\n<p>Group을 Type으로 표현하자면 아래와 같다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Group = {\n  type: &quot;어린이집&quot; | &quot;회사&quot;;\n  name: string;\n\n  // children, workers중 1가지는 꼭 있어야함\n  workers: Worker[];\n  children: Child[];\n};</code>\n        </deckgo-highlight-code>\n<h1>Intersection Types : AND</h1>\n<p>type을 조합하는데 Union은 OR이라면 Intersction은 AND</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Student = {\n  name: string,\n  score: number\n}\n\ntype Worker = {\n  enployeeId: number;\n  work: () =&gt; void\n}\n\nconst internWork(person: Student &amp; Worker) =&gt; {\n  console.log(`${person.name} is working!!`);\n  person.work();\n}\n\n/*\n  person에 값을 넣을때 Student에 있는 property랑 Worker의 property랑\n  2가지 다 포함되어야 에러가 나지 않음.\n*/\ninternWork({\n  name: &quot;경택&quot;,\n  score: 100,\n  enployeeId: 1,\n  work: () =&gt; {\n    alert(&quot;일하는중!&quot;);\n  }\n})</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"[Typescript] Type Alias 정리","slug":"Type-Alias-정리","date":"2021.10.08","description":"Typescript에서 type을 정의할 수 있다."}}},"pageContext":{"id":"dc1d6bb2-a0ca-5450-b2ef-43ccb4dd8327"}},
    "staticQueryHashes": []}