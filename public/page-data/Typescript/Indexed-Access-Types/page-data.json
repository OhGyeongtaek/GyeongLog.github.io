{
    "componentChunkName": "component---src-pages-post-tsx",
    "path": "/Typescript/Indexed-Access-Types",
    "result": {"data":{"markdownRemark":{"html":"<p>객체 타입에서 특정 요소의 타입을 지정하여 가져올 수 있다.</p>\n<h1><a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\">공식 사이트 참조</a></h1>\n<h2>Indexed Types 사용해보기</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type Person = {\n  age: number;\n  name: string;\n  alive: boolean;\n};\n\n// Age라는 타입은 Person의 age를 참조하여 number타입이 들어간다.\ntype Age = Person[&quot;age&quot;];</code>\n        </deckgo-highlight-code>\n<h2>여러가지 요소 가져오기</h2>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">type AgeOrName = Person[&quot;age&quot; | &quot;name&quot;];\n// type AgeOrName = number | string;\n\ntype AllAttributes = Person[keyof Person];\n// type AllAttributes = number | string | boolean;</code>\n        </deckgo-highlight-code>\n<p>AgeOrName은 Person에서 age와 name타입을 가져와서 타입을 생성한다.</p>\n<p>AllAttributes는 Person의 키값을 통해 Person 요소들의 타입을 가지고와서 Person의 모든 속성들이 타입을 정의한다.</p>\n<h2>Typeof를 이용하여 타입 선언하기</h2>\n<p>상수로 이미 만들어진 객체를 타입으로 만들때 typeof를 사용할 수 있다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">const MyArray = [\n  { name: &quot;Alice&quot;, age: 15 },\n  { name: &quot;Bob&quot;, age: 23 },\n  { name: &quot;Eve&quot;, age: 38 },\n];\n\ntype Person = typeof MyArray[number];\n// type Person = { name: string; age: number; }\n\ntype Age = typeof MyArray[number][&quot;age&quot;];\n// type Age = number;</code>\n        </deckgo-highlight-code>\n<p>type Person는 MyArray를 타입으로 만들어 MyArray의 오브젝트 타입이 선언된다.</p>\n<p>type Age는 MyArray의 age의 타입이 선언된다.</p>","frontmatter":{"title":"[Typescript] Indexed Access Types","slug":"Indexed-Access-Types","date":"2021.10.17","description":"Typescript에서 Indexed Access Types이란 무엇인지 알아보자!"}}},"pageContext":{"id":"8a569684-c040-54ed-93c5-32e1367b64c9"}},
    "staticQueryHashes": []}