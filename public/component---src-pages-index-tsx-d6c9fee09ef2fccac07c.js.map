{"version":3,"file":"component---src-pages-index-tsx-d6c9fee09ef2fccac07c.js","mappings":"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","sources":["webpack://blog/./src/consts/thema.ts","webpack://blog/./src/components/PostListItem/index.tsx","webpack://blog/./src/components/PostList/index.tsx","webpack://blog/./src/components/Pagination/index.tsx","webpack://blog/./src/hooks/useQeuryString.ts","webpack://blog/./src/consts/search.ts","webpack://blog/./src/pages/index.tsx","webpack://blog/./src/consts/pagination.ts"],"sourcesContent":["export const Colors = {\n  primary: \"rgb(50, 175, 178)\",\n};\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Colors } from \"../../consts/thema\";\nimport { RemarkNode } from \"../../types/MarkdownRemark\";\n\ntype Props = {\n  item: RemarkNode;\n  onClickItem?: (item: Props[\"item\"]) => void;\n};\n\nfunction ListItem({ item, onClickItem }: Props) {\n  const handleClickItem = () => {\n    onClickItem?.(item);\n  };\n\n  return (\n    <Item onClick={handleClickItem}>\n      <Title> {item.frontmatter.title} </Title>\n      <Description>{item.frontmatter.description}</Description>\n      <DescriptionDate>{item.frontmatter.date}</DescriptionDate>\n    </Item>\n  );\n}\n\nconst Item = styled.li`\n  padding: 0 16px;\n  padding-bottom: 16px;\n  margin-bottom: 16px;\n  border-bottom: 1px solid #eee;\n  cursor: pointer;\n`;\n\nconst Title = styled.h2`\n  font-size: 1.4rem;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst Description = styled.p`\n  font-size: 0.9rem;\n  padding: 4px 0;\n  color: #666;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst DescriptionDate = styled.p`\n  font-size: 0.85rem;\n  padding: 4px 0;\n  color: #666;\n  text-align: right;\n`;\n\nexport { Props as ListItemProps };\n\nexport default ListItem;\n","import React from \"react\";\nimport ListItem, { ListItemProps } from \"../PostListItem\";\n\ntype Props = {\n  items: ListItemProps[\"item\"][];\n  onClickItem?: (item: ListItemProps[\"item\"]) => void;\n};\n\nfunction List({ items, onClickItem }: Props) {\n  const handleClickItem = (item: ListItemProps[\"item\"]) => {\n    onClickItem?.(item);\n  };\n\n  return (\n    <ul>\n      {items.map((item) => (\n        <ListItem\n          item={item}\n          key={`list-item-${item.id}`}\n          onClickItem={handleClickItem}\n        />\n      ))}\n    </ul>\n  );\n}\n\nexport { Props as ListProps };\n\nexport default List;\n","import styled from \"@emotion/styled\";\nimport React, { useMemo } from \"react\";\nimport { Colors } from \"../../consts/thema\";\n\ntype Props = {\n  // 총 데이터의 갯수\n  count: number;\n\n  // 몇개의 페이지 버튼을 출력할 것인지\n  buttonLimit?: number;\n\n  // 한 페이지에 몇개의 row를 보여줄지\n  rowLimit?: number;\n\n  // 현재 선택된 페이지\n  current: number;\n\n  onClickButton: (page: number) => void;\n};\n\nfunction Pagination({\n  count,\n  buttonLimit,\n  current,\n  rowLimit,\n  onClickButton,\n}: Props) {\n  const handleClickButton = (page: number) => {\n    onClickButton(page);\n  };\n\n  const paging = useMemo(() => {\n    // 몇개의 페이지 버튼을 출력할 것인지\n    const limitValue = buttonLimit ?? 10;\n\n    // 한 페이지에 몇개의 row를 보여줄지\n    const pageSizeValue = rowLimit ?? 10;\n\n    // 총 페이지\n    const totalPage = Math.ceil(count / pageSizeValue);\n\n    // 페이지 그룹\n    const pageGroup = Math.ceil(current / limitValue);\n\n    // 해당 그룹의 마지막 페이지\n    let lastPage = pageGroup * limitValue;\n\n    // 마지막 페이지가 totalPage보다 크면 totalPage로 변경\n    if (lastPage > totalPage) {\n      lastPage = totalPage;\n    }\n\n    const firstPage = (pageGroup - 1) * limitValue;\n    const nextPage = lastPage + 1;\n    const prevPage = firstPage - 1;\n\n    const showBlockCount =\n      lastPage >= totalPage ? lastPage % limitValue : limitValue;\n\n    const pageButtons = [];\n\n    for (let i = 1; i <= showBlockCount; i++) {\n      const now = firstPage + i;\n\n      if (isNaN(now)) continue;\n\n      pageButtons.push(\n        <PageButton\n          type=\"button\"\n          key={`page-button-${i}`}\n          aria-selected={now === current}\n          onClick={() => handleClickButton(now)}\n        >\n          {now}\n        </PageButton>\n      );\n    }\n\n    return {\n      nextPage,\n      prevPage,\n      pageButtons,\n    };\n  }, []);\n\n  return <Styler>{paging.pageButtons}</Styler>;\n}\n\nconst Styler = styled.div`\n  padding: 20px 0;\n  text-align: center;\n`;\n\nconst PageButton = styled.button`\n  border: 2px solid #ccc;\n  cursor: pointer;\n  margin: 0 8px;\n  min-width: 30px;\n  padding: 8px 12px;\n  background: none;\n  border-radius: 4px;\n  color: #666;\n\n  &[aria-selected=\"true\"] {\n    border: 2px solid ${Colors.primary};\n    color: ${Colors.primary};\n    font-weight: bold;\n  }\n`;\n\nexport default Pagination;\n","import { DEFAULT_CATEGORY, DEFAULT_PAGE_NO } from \"../consts/search\";\nimport { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\n\ntype ReturnValue = [\n  {\n    page: number;\n    category: string;\n  },\n  {\n    setPage: Dispatch<SetStateAction<number>>;\n    setCategory: Dispatch<SetStateAction<string>>;\n  }\n];\n\ntype PushStateProps = {\n  page: number;\n  category: string;\n};\n\nexport default (): ReturnValue => {\n  const defaults = useMemo(() => getDefaultValues(), []);\n\n  const [page, setPage] = useState<number>(defaults?.page);\n  const [category, setCategory] = useState<string>(defaults?.category);\n\n  useEffect(() => {\n    setPage(DEFAULT_PAGE_NO);\n    pushState({ category, page });\n  }, [category]);\n\n  useEffect(() => {\n    pushState({ category, page });\n  }, [page]);\n\n  return [\n    { category, page },\n    {\n      setCategory,\n      setPage,\n    },\n  ];\n};\n\nconst getDefaultValues = () => {\n  if (typeof location !== \"undefined\") {\n    const URLSearch = new URLSearchParams(location.search);\n\n    const paramPage = Number(URLSearch.get(\"page\"));\n    const paramCategory = URLSearch.get(\"category\");\n\n    return {\n      page: paramPage > 1 ? paramPage : DEFAULT_PAGE_NO,\n      category: paramCategory !== \"\" ? paramCategory : DEFAULT_CATEGORY,\n    };\n  }\n};\n\nconst pushState = ({ page, category }: PushStateProps) => {\n  history.pushState({}, \"\", `?category=${category}&page=${page}`);\n};\n","export const DEFAULT_PAGE_NO = 1;\nexport const DEFAULT_CATEGORY = \"ALL\";\n\nexport const CATEGORY_TYPE_ALL = \"ALL\";\nexport const CATEGORY_TYPE_NOMAL = \"NOMAL\";\n","import React, { useState } from \"react\";\nimport List from \"../components/PostList\";\nimport { ListItemProps } from \"../components/PostListItem\";\nimport { graphql, navigate } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport { AllMarkdownRemark } from \"../types/MarkdownRemark\";\nimport Pagination from \"../components/Pagination\";\nimport MainLayout from \"../components/Layouts/MainLayout\";\nimport SEO from \"../components/SEO\";\nimport useQeuryString from \"../hooks/useQeuryString\";\nimport { POST_LIMIT } from \"../consts/pagination\";\nimport { ChipItem } from \"../components/Chip\";\n\ntype Props = {\n  data: AllMarkdownRemark;\n  pageContext: {\n    limit: number;\n    page: number;\n  };\n};\n\nconst GyeongLogPostList = ({ data, pageContext }: Props) => {\n  const [queryString, setQueryString] = useQeuryString();\n\n  const [categories, setCategories] = useState<ChipItem[]>([]);\n\n  const { nodes, totalCount, group } = data.allMarkdownRemark;\n\n  const posts = nodes\n    // .filter((node) => {\n    //   return (\n    //     queryString.category === CATEGORY_TYPE_ALL ||\n    //     queryString.category?.split(\",\").indexOf(node.frontmatter.category) > -1\n    //   );\n    // })\n    .slice((queryString.page - 1) * POST_LIMIT, POST_LIMIT);\n\n  // const createCategories = useCallback((selected: string[]) => {\n  //   if (group?.length > 0) {\n  //     const newCategories = getCategories(group, selected);\n\n  //     setQueryString.setCategory(\n  //       newCategories\n  //         .filter((category) => category.checked)\n  //         .map((category) => category.value)\n  //         .join(\",\")\n  //     );\n\n  //     setCategories(newCategories);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   createCategories([]);\n  // }, []);\n\n  const handleClickItem = ({ frontmatter }: ListItemProps[\"item\"]) => {\n    navigate(`/${frontmatter.category}/${frontmatter.slug}`);\n  };\n\n  const handleClickPageButton = (page: number) => {\n    setQueryString.setPage(page);\n  };\n\n  // const handleChangeCategories = (items: ChipItem[], changeItem: ChipItem) => {\n  //   const idx = items.findIndex((item) => item.type === CATEGORY_TYPE_ALL);\n\n  //   idx > -1 && changeItem.type === CATEGORY_TYPE_ALL\n  //     ? createCategories([])\n  //     : createCategories(items.map((item) => String(item.value)));\n  // };\n\n  return (\n    <>\n      {nodes && (\n        <MainLayout>\n          <SEO title=\"게시글 목록\" />\n          <Contents>\n            <List items={posts} onClickItem={handleClickItem} />\n            <Pagination\n              count={totalCount}\n              current={queryString.page}\n              rowLimit={pageContext.limit}\n              onClickButton={handleClickPageButton}\n            />\n          </Contents>\n        </MainLayout>\n      )}\n    </>\n  );\n};\n\n// const getCategories = (group: PostCategoryStatistics[], selected: string[]) => {\n//   const items: ChipItem[] = [\n//     {\n//       value: DEFAULT_CATEGORY,\n//       label: DEFAULT_CATEGORY,\n//       type: CATEGORY_TYPE_ALL,\n//       checked: selected.length === 0,\n//       disabled: selected.length === 0,\n//     },\n//   ];\n\n//   group.forEach(({ fieldValue, totalCount }) => {\n//     items.push({\n//       value: fieldValue,\n//       label: `${fieldValue} : ${totalCount}`,\n//       checked: selected.indexOf(fieldValue) > -1,\n//     });\n//   });\n\n//   return items;\n// };\n\nconst Contents = styled.main`\n  max-width: 1000px;\n  min-height: 600px;\n  padding-top: 40px;\n  margin: 0 auto;\n\n  & .chip-group {\n    text-align: center;\n    margin-bottom: 20px;\n  }\n\n  & .chip-group .chip {\n    margin: 0 4px;\n  }\n`;\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: frontmatter___date }) {\n      totalCount\n\n      group(field: frontmatter___category) {\n        totalCount\n        fieldValue\n      }\n\n      nodes {\n        id\n        fileAbsolutePath\n        frontmatter {\n          title\n          slug\n          description\n          date\n          category\n        }\n      }\n    }\n  }\n`;\n\nexport default React.memo(GyeongLogPostList);\n","export const POST_LIMIT = 10;\n"],"names":["Colors","primary","Item","Title","Description","DescriptionDate","item","onClickItem","onClick","frontmatter","title","description","date","items","handleClickItem","map","key","id","Styler","PageButton","count","buttonLimit","current","rowLimit","onClickButton","paging","useMemo","limitValue","pageSizeValue","totalPage","Math","ceil","pageGroup","lastPage","firstPage","nextPage","prevPage","showBlockCount","pageButtons","i","now","isNaN","push","type","getDefaultValues","location","URLSearch","URLSearchParams","search","paramPage","Number","get","paramCategory","page","category","pushState","history","GyeongLogPostList","data","pageContext","defaults","useState","setPage","setCategory","useEffect","useQeuryString","queryString","setQueryString","allMarkdownRemark","nodes","totalCount","posts","group","slice","MainLayout","SEO","Contents","navigate","slug","limit","React"],"sourceRoot":""}